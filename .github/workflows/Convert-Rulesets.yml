name: Extract and Process Rulesets

on:
  schedule:
    - cron: '0,30 * * * *'
  workflow_dispatch:

jobs:
  Converting:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Docker services to be ready
        run: |
          echo "Waiting for Docker services to be ready..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 10
          done

      - name: Process Links and Download Files
        run: |
          # 处理每个链接
          while read -r Ruleset_link; do
            # 跳过注释行和空白行
            if [[ "$Ruleset_link" =~ ^\s*#.* ]] || [[ -z "${Ruleset_link// }" ]]; then
              continue
            fi
            
            # 特殊URL 😂 处理
            encoded_module_link=$(echo "$Ruleset_link" | sed 's/😂/%F0%9F%98%82/g')

            # 获取作者名（假设作者在 URL 中的第4部分）
            author=$(echo "$Ruleset_link" | cut -d'/' -f4)
            filename_noext=$(basename "$Ruleset_link" | sed 's/\(.*\)\..*/\1/')
            encoded_filename=$(echo "$filename_noext" | jq -sRr @uri)
            
            # 创建文件夹
            echo "Creating directories for $author"
            mkdir -p Rulesets/{Surge,Loon,Shadowrocket,Clash}/$author/Beta

            # 构建模块的 URL
            Surge_url="http://localhost:9100/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=surge-rule-set&nore=true"
            Surge_Beta_url="http://localhost:9101/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=surge-rule-set&nore=true&jqEnabled=true"
            Loon_url="http://localhost:9100/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.lsr?type=rule-set&target=loon-rule-set&icon=Loon&nore=true"
            Loon_Beta_url="http://localhost:9101/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.lsr?type=rule-set&target=loon-rule-set&icon=Loon&nore=true&jqEnabled=true"
            Shadowrocket_url="http://localhost:9100/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=shadowrocket-rule-set&nore=true"
            Shadowrocket_Beta_url="http://localhost:9101/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=shadowrocket-rule-set&nore=true&jqEnabled=true"
            Clash_url="http://localhost:9100/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=stash-rule-set&nore=true"
            Clash_Beta_url="http://localhost:9101/file/_start_/${encoded_module_link}/_end_/${encoded_filename}.list?type=rule-set&target=stash-rule-set&nore=true&jqEnabled=true"

            # 下载各模块文件
            echo "Downloading Surge file: $Surge_url"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Surge/$author/$filename_noext.list" "$Surge_url" || echo "Failed to download $filename_noext.list"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Surge/$author/Beta/$filename_noext.list" "$Surge_Beta_url" || echo "Failed to download $filename_noext.list"

            echo "Downloading Loon file: $Loon_url"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Loon/$author/$filename_noext.lsr" "$Loon_url" || echo "Failed to download $filename_noext.lsr"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Loon/$author/Beta/$filename_noext.lsr" "$Loon_Beta_url" || echo "Failed to download $filename_noext.lsr"

            echo "Downloading Shadowrocket file: $Shadowrocket_url"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Shadowrocket/$author/$filename_noext.list" "$Shadowrocket_url" || echo "Failed to download $filename_noext.list"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Shadowrocket/$author/Beta/$filename_noext.list" "$Shadowrocket_Beta_url" || echo "Failed to download $filename_noext.list"

            echo "Downloading Clash file: $Clash_url"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Clash/$author/$filename_noext.yaml" "$Clash_url" || echo "Failed to download $filename_noext.yaml"
            curl -A "Surge Mac/2985" -L -o "Rulesets/Clash/$author/Beta/$filename_noext.yaml" "$Clash_Beta_url" || echo "Failed to download $filename_noext.yaml"
          done < Links/Rulesets-Links.txt

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取当前日期，设置为北京时间 (UTC+8)
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
    
          # 添加所有更改
          git add Rulesets/*
    
          # 如果没有变化，跳过提交
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # 提交消息，包含动态的日期
            COMMIT_MESSAGE="Converted Rulesets at $DATE (UTC+8)"
      
            # 确保仓库是最新的，避免冲突
            git stash
            git pull --rebase  # 同步远程仓库的最新更改
            git stash pop  # 恢复之前的更改
      
            # 再次添加文件，进行提交
            git add Rulesets/*
            git commit -m "$COMMIT_MESSAGE"
            git push
          fi
