name: Mirror fmz200 Modules

on:
  schedule:
    - cron: '15,45 * * * *'  # 每小时的 15 分和 45 分执行
  workflow_dispatch:

jobs:
  fetch-fmz200:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Wait for Docker service
        run: |
          echo "Waiting for Docker..."
          for i in {1..10}; do
            nc -z localhost 9100 && break
            sleep 5
          done

      - name: Download fmz200 Modules
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          fetch_files_recursive() {
            local api_url="$1"
            local base_dir="$2"

            items=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$api_url")

            for row in $(echo "$items" | jq -r '.[] | @base64'); do
              _jq() {
                echo "${row}" | base64 --decode | jq -r "${1}"
              }
              type=$(_jq '.type')
              name=$(_jq '.name')
              download_url=$(_jq '.download_url')
              url=$(_jq '.url')

              if [ "$type" == "file" ]; then
                mkdir -p "$base_dir"
                echo "Downloading $download_url → $base_dir/$name"
                curl -s -L -H "Authorization: token $GITHUB_TOKEN" -o "$base_dir/$name" "$download_url"
              elif [ "$type" == "dir" ]; then
                fetch_files_recursive "$url" "$base_dir/$name"
              fi
            done
          }

          # === Loon (.lpx → .plugin) ===
          echo "Fetching fmz200 Loon plugins (.lpx → .plugin)"
          LOON_API="https://api.github.com/repos/fmz200/wool_scripts/contents/Loon/plugin/split"
          mkdir -p Modules/Loon/fmz200
          fetch_files_recursive "$LOON_API" "Modules/Loon/fmz200"
          ## 转换后缀
          #find Modules/Loon/fmz200 -type f -name "*.lpx" | while read f; do
          #  mv "$f" "${f%.lpx}.plugin"
          #done

          # === Surge (.sgmodule) ===
          echo "Fetching fmz200 Surge plugins (.sgmodule)"
          SURGE_API="https://api.github.com/repos/fmz200/wool_scripts/contents/Surge/plugin/split"
          mkdir -p Modules/Surge/fmz200
          mkdir -p Modules/Shadowrocket/fmz200
          fetch_files_recursive "$SURGE_API" "Modules/Surge/fmz200"

          category="fmz200"
          encoded_category=$(echo "$category" | jq -sRr @uri)

          # 转换 Surge → Shadowrocket
          for sg_file in $(find Modules/Surge/fmz200 -type f -name "*.sgmodule"); do
            NAME_NOEXT=$(basename "$sg_file" .sgmodule)
            encoded_filename=$(echo "$NAME_NOEXT" | jq -sRr @uri)

            SR_URL="http://localhost:9100/file/_start_/https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main/${sg_file}/_end_/${encoded_filename}.sgmodule?type=loon-plugin&target=shadowrocket-module&category=${encoded_category}&nore=true"
            SR_OUT="Modules/Shadowrocket/fmz200/${NAME_NOEXT}.srmodule"
            echo "Converting → Shadowrocket: $SR_URL → $SR_OUT"
            curl -A "Surge Mac/2985" -L -o "$SR_OUT" "$SR_URL" || echo "Failed to convert $NAME_NOEXT"
          done

      - name: Find and replace external JS resources in .sgmodule, .plugin, and .srmodule files
        continue-on-error: true
        run: |
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"

          mkdir -p Modules/JS/fmz200

          for sgmodule_file in $(find Modules/Surge/fmz200 -type f -name "*.sgmodule"); do
            author="fmz200"
            module_folder=$(basename "$sgmodule_file" .sgmodule)
            echo "Processing $sgmodule_file for JS links"

            js_links=$(grep -v '#' "$sgmodule_file" | grep -oP 'https?://[^ ]+\.(json|js)' || echo "")

            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$module_folder/$js_filename"
              github_js_url="$js_base_url/$author/$module_folder/$js_filename"

              mkdir -p "$(dirname "$local_js_path")"

              echo "Downloading $js_link to $local_js_path"
              if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Replacing $js_link with $github_js_url"
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"

                loon_file="Modules/Loon/$author/$module_folder.plugin"
                shadowrocket_file="Modules/Shadowrocket/$author/$module_folder.srmodule"

                [ -f "$loon_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_file"
                [ -f "$shadowrocket_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_file"
              fi
            done
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"

          git add Modules/*

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            COMMIT_MESSAGE="Synched Modules at $DATE (UTC+8)"
            git stash
            git pull --rebase
            git stash pop || true
            git add Modules/*
            git commit -m "$COMMIT_MESSAGE"
            git push
          fi
