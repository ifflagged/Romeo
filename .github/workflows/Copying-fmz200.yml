name: Mirror fmz200 Modules

on:
  schedule:
    - cron: '15,45 * * * *'  # 每小时的 15 分和 45 分执行
  workflow_dispatch:

jobs:
  fetch-fmz200:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Wait for Docker service
        run: |
          echo "Waiting for Docker..."
          for i in {1..10}; do
            nc -z localhost 9100 && break
            sleep 5
          done

      - name: Download fmz200 Modules
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Loon .lpx → 扁平化保存
          echo "Fetching fmz200 Loon plugins (.lpx)"
          LOON_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/fmz200/wool_scripts/git/trees/main?recursive=1" \
            | jq -r '.tree[] | select(.path | startswith("Loon/plugin/split/") and (.path|endswith(".lpx"))) | .path')

          mkdir -p Modules/Loon/fmz200 Modules/Loon/fmz200/Beta
          category="fmz200"
          encoded_category=$(echo "$category" | jq -sRr @uri)

          for PATH in $LOON_FILES; do
            FILENAME=$(basename "$PATH")   # 去掉子目录，只保留文件名
            NAME_NOEXT="${FILENAME%.lpx}"
            RAW_URL="https://raw.githubusercontent.com/fmz200/wool_scripts/main/$PATH"

            # 保存原始 Loon .lpx
            LOON_OUT="Modules/Loon/fmz200/$FILENAME"
            echo "Downloading Loon lpx: $RAW_URL → $LOON_OUT"
            curl -L -o "$LOON_OUT" "$RAW_URL"

            # 转换成 Loon .lpx (Beta)
            encoded_filename=$(echo "$NAME_NOEXT" | jq -sRr @uri)
            LOON_BETA_URL="http://localhost:9101/file/_start_/${RAW_URL}/_end_/${encoded_filename}.lpx?type=loon-plugin&target=loon-plugin&category=${encoded_category}&nore=true"
            LOON_BETA_OUT="Modules/Loon/fmz200/Beta/${NAME_NOEXT}.lpx"
            echo "Converting → Loon Beta: $LOON_BETA_URL → $LOON_BETA_OUT"
            curl -A "Surge Mac/2985" -L -o "$LOON_BETA_OUT" "$LOON_BETA_URL" || echo "Failed to convert Loon Beta $NAME_NOEXT"
          done

          # Surge .sgmodule → 扁平化保存 + Shadowrocket 转换
          echo "Fetching fmz200 Surge plugins (.sgmodule)"
          SURGE_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/fmz200/wool_scripts/git/trees/main?recursive=1" \
            | jq -r '.tree[] | select(.path | startswith("Surge/plugin/split/") and (.path|endswith(".sgmodule"))) | .path')

          mkdir -p Modules/Surge/fmz200 Modules/Surge/fmz200/Beta \
                   Modules/Shadowrocket/fmz200 Modules/Shadowrocket/fmz200/Beta

          for PATH in $SURGE_FILES; do
            FILENAME=$(basename "$PATH")   # 去掉子目录，只保留文件名
            NAME_NOEXT="${FILENAME%.sgmodule}"
            RAW_URL="https://raw.githubusercontent.com/fmz200/wool_scripts/main/$PATH"

            SURGE_OUT="Modules/Surge/fmz200/$FILENAME"
            SURGE_BETA_OUT="Modules/Surge/fmz200/Beta/$FILENAME"
            echo "Downloading Surge sgmodule: $RAW_URL → $SURGE_OUT"
            curl -L -o "$SURGE_OUT" "$RAW_URL"

            # Surge Beta 转换
            encoded_filename=$(echo "$NAME_NOEXT" | jq -sRr @uri)
            SURGE_BETA_URL="http://localhost:9101/file/_start_/${RAW_URL}/_end_/${encoded_filename}.sgmodule?type=surge-module&target=surge-module&category=${encoded_category}&nore=true"
            echo "Converting → Surge Beta: $SURGE_BETA_URL → $SURGE_BETA_OUT"
            curl -A "Surge Mac/2985" -L -o "$SURGE_BETA_OUT" "$SURGE_BETA_URL" || echo "Failed to convert Surge Beta $NAME_NOEXT"

            # 转换成 Shadowrocket（正式 + Beta）
            SR_URL="http://localhost:9100/file/_start_/${RAW_URL}/_end_/${encoded_filename}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"
            SR_BETA_URL="http://localhost:9101/file/_start_/${RAW_URL}/_end_/${encoded_filename}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"

            SR_OUT="Modules/Shadowrocket/fmz200/${NAME_NOEXT}.srmodule"
            SR_BETA_OUT="Modules/Shadowrocket/fmz200/Beta/${NAME_NOEXT}.srmodule"

            echo "Converting → Shadowrocket: $SR_URL → $SR_OUT"
            curl -A "Surge Mac/2985" -L -o "$SR_OUT" "$SR_URL" || echo "Failed to convert Shadowrocket $NAME_NOEXT"

            echo "Converting → Shadowrocket Beta: $SR_BETA_URL → $SR_BETA_OUT"
            curl -A "Surge Mac/2985" -L -o "$SR_BETA_OUT" "$SR_BETA_URL" || echo "Failed to convert Shadowrocket Beta $NAME_NOEXT"
          done

      - name: Find and replace external JS resources in .sgmodule, .lpx, and .srmodule files
        continue-on-error: true
        run: |
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"

          mkdir -p Modules/JS/fmz200

          for sgmodule_file in $(find Modules/Surge/fmz200 -type f -name "*.sgmodule"); do
            author="fmz200"
            module_folder=$(basename "$sgmodule_file" .sgmodule)
            echo "Processing $sgmodule_file for JS links"

            js_links=$(grep -v '#' "$sgmodule_file" | grep -oP 'https?://[^ ]+\.(json|js)' || echo "")

            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$module_folder/$js_filename"
              github_js_url="$js_base_url/$author/$module_folder/$js_filename"

              mkdir -p "$(dirname "$local_js_path")"

              echo "Downloading $js_link to $local_js_path"
              if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Replacing $js_link with $github_js_url"
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"

                loon_file="Modules/Loon/$author/$module_folder.lpx"
                loon_beta_file="Modules/Loon/$author/Beta/$module_folder.lpx"
                shadowrocket_file="Modules/Shadowrocket/$author/$module_folder.srmodule"
                shadowrocket_beta_file="Modules/Shadowrocket/$author/Beta/$module_folder.srmodule"

                [ -f "$loon_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_file"
                [ -f "$loon_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_beta_file"
                [ -f "$shadowrocket_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_file"
                [ -f "$shadowrocket_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_beta_file"
              fi
            done
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"

          git add Modules/*

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            COMMIT_MESSAGE="Synched Modules at $DATE (UTC+8)"
            git stash
            git pull --rebase
            git stash pop || true
            git add Modules/*
            git commit -m "$COMMIT_MESSAGE"
            git push
          fi
