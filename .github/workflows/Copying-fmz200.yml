name: Mirror fmz200 Modules

on:
  schedule:
    - cron: '11 */12 * * *'  # 每12小时的 11 分执行
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  fetch-fmz200:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      hub:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
      
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          
      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3 curl

      - name: Wait for Docker service
        run: |
          echo "Waiting for Docker..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 5
          done

      - name: Set category
        run: echo "Author=fmz200" >> $GITHUB_ENV

      # === 获取 Loon .lpx 文件 ===
      - name: Fetch Loon .lpx paths
        run: |
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${Author}/wool_scripts/git/trees/main?recursive=1" \
            | jq -r '.tree[] | select(.path | test("Loon/plugin/split/.*\\.lpx$")) | .path' > loon_paths.txt
          cat loon_paths.txt

      - name: Download Loon .lpx files
        run: |
          mkdir -p Modules/Loon/${Author}/Official
          while IFS= read -r path; do
            filename=$(basename "$path")
            encoded_path=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$path'''))")
            echo "Downloading $path → $filename"
            curl -sL -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.raw" \
              "https://api.github.com/repos/${Author}/wool_scripts/contents/$encoded_path?ref=main" \
              -o "Modules/Loon/${Author}/Official/$filename"
          done < loon_paths.txt

      # === 获取 Surge .sgmodule 文件 ===
      - name: Fetch Surge .sgmodule paths
        run: |
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${Author}/wool_scripts/git/trees/main?recursive=1" \
            | jq -r '.tree[] | select(.path | test("Surge/module/split/.*\\.sgmodule$")) | .path' > surge_paths.txt
          cat surge_paths.txt

      - name: Download & Convert Surge .sgmodule files
        run: |
          mkdir -p Modules/Surge/${Author}/Official \
                   Modules/Surge/${Author}/Beta \
                   Modules/Loon/${Author}/Beta \
                   Modules/Shadowrocket/${Author} \
                   Modules/Shadowrocket/${Author}/Beta

          while IFS= read -r path; do
            filename=$(basename "$path")
            name="${filename%.sgmodule}"

            # 原始 sgmodule 下载
            encoded_path=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$path'''))")
            raw_url="https://raw.githubusercontent.com/${Author}/wool_scripts/main/$path"
            echo "Downloading $path → $filename"
            curl -sL -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.raw" \
              "https://api.github.com/repos/${Author}/wool_scripts/contents/$encoded_path?ref=main" \
              -o "Modules/Surge/${Author}/Official/$filename"

            # 转换 (base_url + encoded_name)
            encoded_name=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$name'''))")
            encoded_category=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$CATEGORY'''))")

            Surge_url="http://localhost:9100/file/_start_/${raw_url}/_end_/${encoded_name}.sgmodule?type=surge-module&target=surge-module&category=${encoded_category}&nore=true"
            Surge_Beta_url="http://localhost:9101/file/_start_/${raw_url}/_end_/${encoded_name}.sgmodule?type=surge-module&target=surge-module&category=${encoded_category}&nore=true"

            Loon_url="http://localhost:9100/file/_start_/${raw_url}/_end_/${encoded_name}.lpx?type=surge-module&target=loon-plugin&category=${encoded_category}&nore=true"
            Loon_Beta_url="http://localhost:9101/file/_start_/${raw_url}/_end_/${encoded_name}.lpx?type=surge-module&target=loon-plugin&category=${encoded_category}&nore=true"

            Shadowrocket_url="http://localhost:9100/file/_start_/${raw_url}/_end_/${encoded_name}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"
            Shadowrocket_Beta_url="http://localhost:9101/file/_start_/${raw_url}/_end_/${encoded_name}.srmodule?type=surge-module&target=shadowrocket-module&category=${encoded_category}&nore=true"

            echo "Converting $filename → Surge/Loon/Shadowrocket"
            curl -A "Surge Mac/2985" -sL -o "Modules/Surge/${Author}/$filename" "$Surge_url" || echo "Failed Surge conversion: $name"
            curl -A "Surge Mac/2985" -sL -o "Modules/Surge/${Author}/Beta/$filename" "$Surge_Beta_url" || echo "Failed Surge Beta conversion: $name"

            curl -A "Surge Mac/2985" -sL -o "Modules/Loon/${Author}/$name.lpx" "$Loon_url" || echo "Failed Loon conversion: $name"
            curl -A "Surge Mac/2985" -sL -o "Modules/Loon/${Author}/Beta/$name.lpx" "$Loon_Beta_url" || echo "Failed Loon Beta conversion: $name"

            curl -A "Surge Mac/2985" -sL -o "Modules/Shadowrocket/${Author}/$name.srmodule" "$Shadowrocket_url" || echo "Failed Shadowrocket conversion: $name"
            curl -A "Surge Mac/2985" -sL -o "Modules/Shadowrocket/${Author}/Beta/$name.srmodule" "$Shadowrocket_Beta_url" || echo "Failed Shadowrocket Beta conversion: $name"
          done < surge_paths.txt

      - name: Find and replace external JS resources in .sgmodule, .lpx, and .srmodule files
        continue-on-error: true
        run: |
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"

          mkdir -p Modules/JS/${Author}

          for sgmodule_file in $(find Modules/Surge/${Author} -type f -name "*.sgmodule"); do
            author=${Author}
            module_folder=$(basename "$sgmodule_file" .sgmodule)
            echo "Processing $sgmodule_file for JS links"

            js_links=$(grep -v '#' "$sgmodule_file" | grep -oP 'https?://[^ ]+\.(json|js|jq)' || echo "")

            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$module_folder/$js_filename"
              github_js_url="$js_base_url/$author/$module_folder/$js_filename"

              mkdir -p "$(dirname "$local_js_path")"

              echo "Downloading $js_link to $local_js_path"
              if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Replacing $js_link with $github_js_url"
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"

                loon_file="Modules/Loon/$author/$module_folder.lpx"
                loon_beta_file="Modules/Loon/$author/Beta/$module_folder.lpx"
                shadowrocket_file="Modules/Shadowrocket/$author/$module_folder.srmodule"
                shadowrocket_beta_file="Modules/Shadowrocket/$author/Beta/$module_folder.srmodule"

                [ -f "$loon_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_file"
                [ -f "$loon_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_beta_file"
                [ -f "$shadowrocket_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_file"
                [ -f "$shadowrocket_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_beta_file"
              fi
            done
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"

          git add Modules/*

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            COMMIT_MESSAGE="Synched Modules at $DATE (UTC+8)"
            git stash
            git pull --rebase
            git stash pop || true
            git add Modules/*
            git commit -m "$COMMIT_MESSAGE"
            git push
          fi
