name: Mirror ddgksf2013 Modules

on:
  schedule:
    - cron: '15 */12 * * *'  # 每 12 小时的 15 分执行
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports: [9100:9100, 9101:9101]

    steps:
      - uses: actions/checkout@v3
          
      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install curl jq netcat
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Docker service
        run: |
          echo "Waiting for Docker..."
          for i in {1..10}; do
            nc -z localhost 9100 && nc -z localhost 9101 && break
            sleep 5
          done

      - name: Set category
        run: echo "Author=ddgksf2013" >> $GITHUB_ENV

      - name: Download ddgksf2013 README
        run: |
          curl -s -o README.md https://raw.githubusercontent.com/ddgksf2013/ddgksf2013/main/README.md

      - name: Extract Files URLs
        run: |
          grep -oP '(?<=href=")https?://[^"]+\.(sgmodule|snippet|conf|js)' README.md > plugin_urls.txt
          cat plugin_urls.txt

      - name: Process to different files
        run: |
          category="Jacob"
          encoded_category=$(echo "$category" | jq -sRr @uri)
          while read -r plugin_url; do
            filename=$(basename "$plugin_url")
            Modules_name="${filename%.*}" 
            encoded_Modules_name=$(echo "$Modules_name" | jq -sRr @uri)

            Surge_url="http://localhost:9100/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.sgmodule?type=loon-plugin&target=surge-module&category=${encoded_category}&nore=true"
            Surge_Beta_url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.sgmodule?type=loon-plugin&target=surge-module&category=${encoded_category}&nore=true&jqEnabled=true"
            Loon_url="http://localhost:9100/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.lpx?type=loon-plugin&target=loon-plugin&category=${encoded_category}&icon=Loon&nore=true"
            Loon_Beta_url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.lpx?type=loon-plugin&target=loon-plugin&category=${encoded_category}&icon=Loon&nore=true&jqEnabled=true"
            Shadowrocket_url="http://localhost:9100/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.sgmodule?type=loon-plugin&target=shadowrocket-module&category=${encoded_category}&nore=true"
            Shadowrocket_Beta_url="http://localhost:9101/file/_start_/${plugin_url}/_end_/${encoded_Modules_name}.sgmodule?type=loon-plugin&target=shadowrocket-module&category=${encoded_category}&nore=true&jqEnabled=true"

            mkdir -p Modules/{Surge,Loon,Shadowrocket}/${Author}/Beta

            # Download plugin files
            echo "Converting to ${Modules_name}.sgmodule"
            curl -A "Surge Mac/2985" -L -o "Modules/Surge/${Author}/${Modules_name}.sgmodule" "$Surge_url" || echo "Failed to download ${Modules_name}.sgmodule"
            curl -A "Surge Mac/2985" -L -o "Modules/Surge/${Author}/Beta/${Modules_name}.sgmodule" "$Surge_Beta_url" || echo "Failed to download ${Modules_name}.sgmodule"
            echo "Converting to ${Modules_name}.lpx"
            curl -A "Surge Mac/2985" -L -o "Modules/Loon/${Author}/${Modules_name}.lpx" "$Loon_url" || echo "Failed to download ${Modules_name}.lpx"
            curl -A "Surge Mac/2985" -L -o "Modules/Loon/${Author}/Beta/${Modules_name}.lpx" "$Loon_Beta_url" || echo "Failed to download ${Modules_name}.lpx"
            echo "Converting to ${Modules_name}.srmodule"
            curl -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/${Author}/${Modules_name}.srmodule" "$Shadowrocket_url" || echo "Failed to download ${Modules_name}.srmodule"
            curl -A "Surge Mac/2985" -L -o "Modules/Shadowrocket/${Author}/Beta/${Modules_name}.srmodule" "$Shadowrocket_Beta_url" || echo "Failed to download ${Modules_name}.srmodule"
          done < plugin_urls.txt

      - name: Find and replace external JS resources in .sgmodule, .lpx, and .srmodule files
        continue-on-error: true
        run: |
          js_base_url="https://github.com/${GITHUB_REPOSITORY}/raw/main/Modules/JS"

          mkdir -p Modules/JS/${Author}

          for sgmodule_file in $(find Modules/Surge/${Author} -type f -name "*.sgmodule"); do
            author=${Author}
            module_folder=$(basename "$sgmodule_file" .sgmodule)
            echo "Processing $sgmodule_file for JS links"

            js_links=$(grep -v '#' "$sgmodule_file" | grep -oP 'https?://[^ ]+\.(json|js|jq)' || echo "")

            for js_link in $js_links; do
              js_filename=$(basename "$js_link")
              local_js_path="Modules/JS/$author/$module_folder/$js_filename"
              github_js_url="$js_base_url/$author/$module_folder/$js_filename"

              mkdir -p "$(dirname "$local_js_path")"

              echo "Downloading $js_link to $local_js_path"
              if curl -A "Surge Mac/2985" -L -o "$local_js_path" "$js_link"; then
                echo "Replacing $js_link with $github_js_url"
                sed -i "s|$js_link|$github_js_url|g" "$sgmodule_file"

                loon_file="Modules/Loon/$author/$module_folder.lpx"
                loon_beta_file="Modules/Loon/$author/Beta/$module_folder.lpx"
                shadowrocket_file="Modules/Shadowrocket/$author/$module_folder.srmodule"
                shadowrocket_beta_file="Modules/Shadowrocket/$author/Beta/$module_folder.srmodule"

                [ -f "$loon_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_file"
                [ -f "$loon_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$loon_beta_file"
                [ -f "$shadowrocket_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_file"
                [ -f "$shadowrocket_beta_file" ] && sed -i "s|$js_link|$github_js_url|g" "$shadowrocket_beta_file"
              fi
            done
          done


      - name: Commit and push changes
        run: |
          DATE="$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          
          git add Modules/*

          if git diff --cached --quiet; then
            echo "✅ No changes to commit."
          else
            COMMIT_MESSAGE="Synched Modules at $DATE (UTC+8)"

            # 保存本地修改
            git stash

            # 拉取远程最新修改并重放本地修改
            git pull --rebase || true

            # 还原本地修改
            git stash pop || true

            # 再次添加修改
            git add Modules/*

            git commit -m "$COMMIT_MESSAGE"

            # 推送到远程
            git push || echo "Push failed, maybe remote has new commits. Try again next run."
          fi
